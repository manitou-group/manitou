// Mixins
// -------------------------

//The following mixins already exist in the bootstrap framework

//Former container-fixed
@mixin make-container($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}

@mixin make-row($gutter: $grid-gutter-width) {
  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin clearfix() {
	&:before,
	&:after {
	    content: " "; // 1
	    display: table; // 2
	}
	&:after {
		clear: both;
	}
}
@mixin transition($property,$time:.2s,$fx:ease-out) {
	-webkit-transition: $property $time $fx;
	-moz-transition: $property $time $fx;
	transition: $property $time $fx;
}

@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

//New mixins for the project

@mixin sprite-sheet($file,$x,$y) {
	background:url($file) no-repeat; background-size:$x $y;
}

@mixin sprite($l,$c) {
	$w : 36px;
	$h : 36px;
	$xStart : 0;
	$yStart : 0;
	$xGutter : 10px;
	$yGutter : 10px;
	$x : -( $xStart + (($w + $xGutter) * ( $c - 1 )));
	$y : -( $yStart + (($h + $yGutter) * ( $l - 1 )));
	background-position:$x $y;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  @if $enable-flex {
    -webkit-flex: 0 0 percentage(($columns / $grid-columns));
    -ms-flex: 0 0 percentage(($columns / $grid-columns));
    flex: 0 0 percentage(($columns / $grid-columns));
  } @else {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if $enable-flex {
    -webkit-flex: 0 0 100%;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    //hack for flex-basis support
    min-width: 0;
  }

  @media (min-width: breakpoint-min(sm)) {
    @if $enable-flex {
      -webkit-flex: 0 0 percentage(($columns / $grid-columns));
      -ms-flex: 0 0 percentage(($columns / $grid-columns));
      flex: 0 0 percentage(($columns / $grid-columns));
      //hack for flex-basis support
      min-width: 0;
    } @else {
      float: left;
      width: percentage(($columns / $grid-columns));
    }
  }
}

@mixin make-sm-column-offset($columns) {
  @media (min-width: breakpoint-min(sm)) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if $enable-flex {
    -webkit-flex: 0 0 100%;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    //hack for flex-basis support
      min-width: 0;
  }

  @media (min-width: breakpoint-min(md)) {
    @if $enable-flex {
      -webkit-flex: 0 0 percentage(($columns / $grid-columns));
      -ms-flex: 0 0 percentage(($columns / $grid-columns));
      flex: 0 0 percentage(($columns / $grid-columns));
      //hack for flex-basis support
      min-width: 0;
    } @else {
      float: left;
      width: percentage(($columns / $grid-columns));
    }
  }
}

@mixin make-md-column-offset($columns) {
  @media (min-width: breakpoint-min(md)) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if $enable-flex {
    -webkit-flex: 0 0 100%;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    //hack for flex-basis support
      min-width: 0;
  }

  @media (min-width: breakpoint-min(lg)) {
    @if $enable-flex {
      -webkit-flex: 0 0 percentage(($columns / $grid-columns));
      -ms-flex: 0 0 percentage(($columns / $grid-columns));
      flex: 0 0 percentage(($columns / $grid-columns));
      //hack for flex-basis support
      min-width: 0;
    } @else {
      float: left;
      width: percentage(($columns / $grid-columns));
    }
  }
}

@mixin make-lg-column-offset($columns) {
  @media (min-width: breakpoint-min(lg)) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

// Generate the extra-large columns
@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if $enable-flex {
    -webkit-flex: 0 0 100%;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    //hack for flex-basis support
      min-width: 0;
  }

  @media (min-width: breakpoint-min(xl)) {
    @if $enable-flex {
      -webkit-flex: 0 0 percentage(($columns / $grid-columns));
      -ms-flex: 0 0 percentage(($columns / $grid-columns));
      flex: 0 0 percentage(($columns / $grid-columns));
      //hack for flex-basis support
      min-width: 0;
    } @else {
      float: left;
      width: percentage(($columns / $grid-columns));
    }
  }
}

@mixin make-xl-column-offset($columns) {
  @media (min-width: breakpoint-min(xl)) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

// Reset Padding
@mixin reset-padding($bloc-padding: $bloc-padding) {
  margin-right: -$bloc-padding;
  margin-left: -$bloc-padding;
}

